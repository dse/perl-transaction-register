#!/usr/bin/env perl
use warnings;
use strict;

use FindBin;
use lib "$FindBin::Bin/../lib";

BEGIN {
    my $dir = "$ENV{HOME}/git/dse.d/perl-transaction-register/lib";
    if (-d $dir) {
        require lib;
        import lib $dir;
    }
}

use My::Transaction::Register;
use File::Basename qw(basename);

my $progname = basename($0);

if ($progname eq "check") {
    run_command_check(@ARGV);
} else {
    my $command = shift(@ARGV);
    if (!defined $command) {
        die("No command specified.  Type '$progname help' for more help.\n");
    } elsif ($command eq "dump") {
        run_command_dump(@ARGV);
    } elsif ($command eq "check") {
        run_command_check(@ARGV);
    } elsif ($command eq "rewrite") {
        run_command_rewrite(@ARGV);
    } elsif ($command eq "list-institutions" || $command eq "list-ofx-institutions") {
        run_command_list_ofx_institutions(@ARGV);
    } elsif ($command eq "get-institution-info" || $command eq "get-ofx-institution-info") {
        run_command_get_ofx_institution_info(@ARGV);
    } elsif ($command eq "help") {
        run_command_help();
    } else {
        die("Unknown command: '$command'.  Type '$progname help' for more help.\n");
    }
}

sub run_command_help { print(<<"END"); }
usage:
  $progname help
  $progname check [FILENAME ...]
  $progname rewrite [FILENAME ...]
  $progname list-institutions [SEARCH]
  $progname get-institution-info ID
END

sub run_command_check {
    my $register = My::Transaction::Register->new();

    local $_;
    local @ARGV = @_;

    while (<>) {
        last if /^__END__/;
        $register->parse_line($_);
    }

    $register->output_summary();
    $register->output_checkpoints();

    if ($ENV{DEBUG}) {
        $register->debug();
    }
}

sub run_command_dump {
    my $register = My::Transaction::Register->new();
    local $_;
    local @ARGV = @_;
    while (<>) {
        last if /^__END__/;
        $register->parse_line($_);
    }
    $register->dump();
}

sub run_command_rewrite {
    my $register = My::Transaction::Register->new();

    local $_;
    local @ARGV = @_;

    while (<>) {
        last if /^__END__/;
        s{\R\z}{};              # safer chomp
        $register->parse_line($_);
    }

    $register->output_as_string();
}

sub run_command_list_ofx_institutions {
    my ($search) = @_;
    my @institutions = My::Transaction::Register->list_ofx_institutions($search);
    foreach my $institution (@institutions) {
        printf("%4d  %s\n", $institution->id, $institution->name);
    }
}

use Data::Dumper qw(Dumper);

sub run_command_get_ofx_institution_info {
    my ($id) = @_;
    my $info = My::Transaction::Register->get_ofx_institution_info($id);
    if ($info) {
        print(Dumper($info));
    }
}

